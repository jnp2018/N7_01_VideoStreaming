/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package streamingclient;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.swing.ImageIcon;


/**
 *
 * @author Dung
 */
public class StreamingClient extends javax.swing.JFrame {

    /**
     * Creates new form Client
     */
    MulticastSocket ClientVideo;
    MulticastSocket ClientAudio;
    boolean livecheck = false;
    boolean StreamOn = false;
    boolean BroadCastOn = false;
    boolean VideoGroup = false;
    boolean AudioGroup = false;

    AudioFormat format;
    SourceDataLine sourceLine;

    public StreamingClient() {
        initComponents();
        this.setLocationRelativeTo(this);
        try {
            ClientVideo = new MulticastSocket(1200);
            ClientAudio = new MulticastSocket(1212);
        } catch (SocketException ex) {
            System.out.println("ClientVideo failed");
        } catch (IOException ex) {
            Logger.getLogger(StreamingClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        livesight.setBackground(Color.white);
        livelabel.setText("");

        format = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED, 44100, 16, 2, 4, 44100, true);
        try {
            DataLine.Info info = new DataLine.Info(SourceDataLine.class, format);
            sourceLine = (SourceDataLine) AudioSystem.getLine(info);
            sourceLine.open();
        } catch (LineUnavailableException ex) {
            Logger.getLogger(StreamingClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        new CheckingLiveView().start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        display = new javax.swing.JLabel();
        watchBtn = new javax.swing.JButton();
        livesight = new javax.swing.JButton();
        livelabel = new javax.swing.JLabel();
        SpeakerBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        display.setIcon(new javax.swing.ImageIcon(getClass().getResource("/streamingclient/Webp.net-resizeimage.jpg"))); // NOI18N

        watchBtn.setText("Watch Stream");
        watchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                watchBtnActionPerformed(evt);
            }
        });

        livesight.setBackground(new java.awt.Color(255, 0, 0));

        livelabel.setText("LIVE");

        SpeakerBtn.setText("Turn On Speaker");
        SpeakerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SpeakerBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(livesight, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(livelabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(watchBtn)
                .addGap(72, 72, 72)
                .addComponent(SpeakerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75))
            .addComponent(display, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(display, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(watchBtn)
                        .addComponent(SpeakerBtn))
                    .addComponent(livesight, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(livelabel))
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void watchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_watchBtnActionPerformed
        if (!StreamOn) {
            StreamOn = true;
            new Playing().start();
            watchBtn.setText("Stop");
            watchBtn.setBackground(Color.GREEN);

        } else {
            StreamOn = false;
            watchBtn.setText("Watch Stream");
            watchBtn.setBackground(Color.white);
        }
    }//GEN-LAST:event_watchBtnActionPerformed

    private void SpeakerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SpeakerBtnActionPerformed
        if (!BroadCastOn) {
            BroadCastOn = true;
            new BroadCasting().start();
            SpeakerBtn.setText("Turn Off Speaker");
            SpeakerBtn.setBackground(Color.GREEN);

        } else {
            BroadCastOn = false;
            SpeakerBtn.setText("Turn On Speaker");
            SpeakerBtn.setBackground(Color.white);
        }
    }//GEN-LAST:event_SpeakerBtnActionPerformed

    class BroadCasting extends Thread {

        public BroadCasting() {

        }

        @Override
        public void run() {
            try {
                if (!AudioGroup) {
                    ClientAudio.joinGroup(InetAddress.getByName("224.2.2.4"));
                    AudioGroup = true;
                }
                sourceLine.start();

                while (BroadCastOn) {
                    byte[] res = new byte[17640];
                    DatagramPacket rec = new DatagramPacket(res, res.length);
                    ClientAudio.receive(rec);
                    ByteArrayOutputStream out = new ByteArrayOutputStream();
                    out.write(res, 0, res.length);
                    sourceLine.write(out.toByteArray(), 0, out.size());
                }

                sourceLine.stop();

            } catch (UnknownHostException ex) {
                Logger.getLogger(StreamingClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(StreamingClient.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    class CheckingLiveView extends Thread {

        @Override
        public void run() {
            while (true) {
                if (livecheck) {
                    livesight.setBackground(Color.red);
                    livelabel.setText("LIVE");
                } else {
                    livesight.setBackground(Color.white);
                    livelabel.setText("");

                }
                try {
                    Thread.sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(StreamingClient.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }

    }

    class Playing extends Thread {

        @Override
        public void run() {

            try {
                if (!VideoGroup) {
                    ClientVideo.joinGroup(InetAddress.getByName("224.2.2.3"));
                    VideoGroup = true;
                }

                while (StreamOn) {
                    byte res[] = new byte[307200];
                    DatagramPacket requestPacket = new DatagramPacket(res, res.length);
                    ClientVideo.receive(requestPacket);
                    if (!new String(res).trim().equals("stop")) {
                        livecheck = true;
                        InputStream in = new ByteArrayInputStream(res);
                        BufferedImage image = ImageIO.read(in);
                        display.setIcon(new ImageIcon(image));
                    } else {
                        livecheck = false;
                    }

                }

            } catch (UnknownHostException ex) {
                Logger.getLogger(StreamingClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(StreamingClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StreamingClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StreamingClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StreamingClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StreamingClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StreamingClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SpeakerBtn;
    private javax.swing.JLabel display;
    private javax.swing.JLabel livelabel;
    private javax.swing.JButton livesight;
    private javax.swing.JButton watchBtn;
    // End of variables declaration//GEN-END:variables
}
