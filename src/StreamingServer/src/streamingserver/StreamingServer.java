/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package streamingserver;

import com.github.sarxos.webcam.Webcam;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.TargetDataLine;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Dung
 */
public class StreamingServer extends javax.swing.JFrame {

    /**
     * Creates new form WebcamGUI
     */
    DatagramSocket Videoserver;
    DatagramSocket Audioserver;
    Webcam webcam;
    boolean isRunning = false;
    boolean CamOn = false;
    boolean MicOn = false;



    public StreamingServer() {
        initComponents();
        Camera.setBackground(Color.RED);
        Mic.setBackground(Color.RED);
        try {
            Videoserver = new DatagramSocket();
            Audioserver = new DatagramSocket();
        } catch (SocketException ex) {
            System.out.println("Server failed");
        }
        this.setLocationRelativeTo(this);
        webcam = Webcam.getDefault();
        System.out.println(webcam.getDevice().getName());
        webcam.setViewSize(new Dimension(640, 480));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Mic = new javax.swing.JButton();
        Camera = new javax.swing.JButton();
        capture = new javax.swing.JButton();
        screen = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 51, 51));

        Mic.setText("Turn On Microphone");
        Mic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MicActionPerformed(evt);
            }
        });

        Camera.setText("Turn On Camera");
        Camera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CameraActionPerformed(evt);
            }
        });

        capture.setText("Start Steamming");
        capture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                captureActionPerformed(evt);
            }
        });

        screen.setBackground(new java.awt.Color(0, 0, 0));
        screen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/streamingserver/Webp.net-resizeimage.jpg"))); // NOI18N
        screen.setMaximumSize(new java.awt.Dimension(320, 240));
        screen.setMinimumSize(new java.awt.Dimension(320, 240));
        screen.setPreferredSize(new java.awt.Dimension(320, 240));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(screen, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(Camera, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                        .addComponent(capture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(Mic, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Mic, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(Camera, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(capture, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(screen, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void captureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_captureActionPerformed
        if (!CamOn) {
            JOptionPane.showMessageDialog(this, "Camera is not ON yet! TURN IT ON!");
        } else {
            if (!isRunning) {
                isRunning = true;

                new Capturing().start();
                capture.setBackground(Color.orange);
                capture.setText("Stop Streamming");
            } else {
                isRunning = false;

                capture.setBackground(Color.white);
                capture.setText("Start Streamming");
            }
        }

    }//GEN-LAST:event_captureActionPerformed

    private void MicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MicActionPerformed

        if (!MicOn) {
            MicOn = true;
            new Recording().start();

            Mic.setText("Turn Off Microphone");
            Mic.setBackground(Color.GREEN);
        } else {
            MicOn = false;

            Mic.setText("Turn On Microphone");
            Mic.setBackground(Color.RED);
        }
    }//GEN-LAST:event_MicActionPerformed

    private void CameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CameraActionPerformed
        if (!CamOn) {

            webcam.open();
            Camera.setText("Turn Off Camera");
            Camera.setBackground(Color.GREEN);
            CamOn = true;
        } else {
            isRunning = false;

            capture.setBackground(Color.white);
            capture.setText("Start Streamming");

            webcam.close();
            Camera.setText("Turn On Camera");
            Camera.setBackground(Color.RED);
            CamOn = false;
            try {

                String stopM = "stop";
                DatagramPacket sendPacket = new DatagramPacket(stopM.getBytes(), stopM.getBytes().length, InetAddress.getByName("224.2.2.3"), 1200);
                Videoserver.send(sendPacket);
            } catch (UnknownHostException ex) {
                Logger.getLogger(StreamingServer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(StreamingServer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_CameraActionPerformed

    /**
     * @param args the command line arguments
     */
    class Recording extends Thread {

        AudioFormat format;

        TargetDataLine targetLine;

        Recording() {
            format = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED, 44100, 16, 2, 4, 44100, true);

            try {
                DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);
                targetLine = (TargetDataLine) AudioSystem.getLine(info);

            } catch (LineUnavailableException ex) {
                Logger.getLogger(StreamingServer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        @Override
        public void run() {
            try {

                targetLine.open();
                targetLine.start();

                byte[] data;

                while (MicOn) {
                    data = new byte[targetLine.getBufferSize() / 5];                
                    targetLine.read(data, 0, data.length);
                    DatagramPacket audiopacket = new DatagramPacket(data, data.length, InetAddress.getByName("224.2.2.4"), 1212);
                    Audioserver.send(audiopacket);
                }
                targetLine.stop();
                targetLine.close();

            } catch (UnknownHostException ex) {
                Logger.getLogger(StreamingServer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(StreamingServer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (LineUnavailableException ex) {
                Logger.getLogger(StreamingServer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    class Capturing extends Thread {

        @Override
        public void run() {

            while (isRunning) {

                try {
                    BufferedImage image = webcam.getImage();
                    screen.setIcon(new ImageIcon(image));
                    Thread.sleep(50);
                    byte res[] = new byte[10];
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    ImageIO.write(image, "jpg", baos);
                    baos.flush();
                    res = baos.toByteArray();
                    baos.close();
                    DatagramPacket sendPacket = new DatagramPacket(res, res.length, InetAddress.getByName("224.2.2.3"), 1200);
                    Videoserver.send(sendPacket);
                } catch (InterruptedException ex) {
                    Logger.getLogger(StreamingServer.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(StreamingServer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StreamingServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StreamingServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StreamingServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StreamingServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StreamingServer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Camera;
    private javax.swing.JButton Mic;
    private javax.swing.JButton capture;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel screen;
    // End of variables declaration//GEN-END:variables
}
